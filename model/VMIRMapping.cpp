/*
 * Code generator for Equid project
 * (C) Maxim Menshikov 2019-2020
 */
#include <fstream>
#include <iostream>
#include <map>
#include <ostream>
#include <sstream>
#include "yaml-cpp/yaml.h"

#include "CodegenModel.hpp"
#include "CodegenParam.hpp"
#include "Syntax.hpp"
#include "Utils.hpp"
#include "VMIRMapping.hpp"

std::string
CodegenModel_VMIRMapping::getName()
{
    return std::string("vmir_mapping");
}

void
CodegenModel_VMIRMapping::process(CodegenParam &param, YAML::Node data)
{
    auto field = data["field"];
    if (field.IsSequence())
    {
        param.setParameter(CodegenParamId::HeaderStream,
                           new std::ofstream(std::string(
                               "tmp/codegen-staging/include/VirtualMachine/"
                               "VMIR.hpp")));
        internalProcess(param, field);
        delete param.getHeaderStream();
    }
}

void
CodegenModel_VMIRMapping::internalProcess(CodegenParam &param, YAML::Node node)
{
    auto headerRoot =
        createModule("VirtualMachine", "VMIR", true, node["header"],
                     std::vector<std::string>({}), node["dependency"]);
    auto                        headerMod = headerRoot->children().back();
    std::map<std::string, bool> map;
    size_t                      k = 0;

    headerRoot->insert(
        0,
        Syntax::nl(Syntax::create(SyntaxKind::Exact,
                                  "/* This file is autogenerated. "
                                  "Please don't edit it directly */")));

    for (size_t i = 0; i < node.size(); i++)
    {
        auto name = node[i]["name"];
        auto base = node[i]["base"];

        assert(name.IsDefined());

        if (name.as<std::string>() == "Unknown")
            continue;

        auto cls = createClass("VMIR_" + name.as<std::string>(), base);
        headerMod->add(cls);
        cls->add(Syntax::nl(Syntax::create(SyntaxKind::Exact, "public:")));
        cls->add(createFunction("virtual VmOpCode", "getKind"));
        cls->add(Syntax::create(SyntaxKind::Exact, "const"));
        cls->add(
            Syntax::create(SyntaxKind::Block,
                           Syntax::stmt(Syntax::create(
                               SyntaxKind::Exact,
                               "return VmOpCode::" + name.as<std::string>()))));
        if (base.IsSequence())
        {
            for (size_t j = 0; j < base.size(); ++j)
            {
                map["\"VirtualMachine/" + base[j].as<std::string>() +
                    ".hpp\""] = true;
            }
        }
    }

    for (auto &el : map)
    {
        headerRoot->insert(3 + (k++),
                           Syntax::create(SyntaxKind::Header, el.first));
    }
    HEADER_STREAM() << headerRoot->toString();
}
